classDiagram

    class AuthoritiesDB{
        -Set~bytes32~DecentralizedNameMappingAuthority
        -Set~bytes32~SectionMappingAuthority
        -Set~bytes32~responsable_db

        +save_responsable(obj_id: bytes32, responsable: address)
        +save_dnma(ror_id: string, s_prefix : string, responsable: address)
        +set_dnma_noid(dnma_id: bytes32, noid_provides_addr: address)
        +save_sma(ror_id_dnma: string, sma_sprefix : string, responsable: address)
        +set_sma_noid(sma_id: bytes32, noid_provides_addr: address)
        
        +get_sma(id: bytes32) SectionMappingAuthority
        +get_sma(sma_sprefix: string, dnma_id: bytes32) SectionMappingAuthority

        +get_dma(id: bytes32) DecentralizedNameMappingAuthority
        +get_sma(ror_id: string) SectionMappingAuthority
    }

    class ExternalPidDB{
        -Set~bytes32~ExternalPID

        +save(schema:string, pid:string, dark_pid_hash:bytes32) bytes32
        +exist(pid:string) bool
        +get(id:bytes32) ExternalPID
        +get(pid:string) ExternalPID
        +get_by_index(index:uint256) ExternalPID
        +count() uint256
    }

    class PidDB{
        -Set~bytes32~dARK
        +assing_id(noid_provider_addr:address) bytes32
        
        +add_externalPid(pid_hash:bytes32, epid_addr:bytes32)
        +add_url(pid_hash:bytes32, url:string)
        +add_url(set_payload:bytes32, payload:string)

        +get(pid_hash:bytes32) dARK
        +get_by_ark(ark: string) dARK
        +get_by_index(index:uint256) dARK
        +count() uint256
    }

    class PayloadSchemaDB{
        -Set~bytes32~PayloadSchema

        
        +gen_schema_id(schema_name:string,schema_version:string) bytes32

        +save(schema_name:string,schema_version:string,configured:bool) bytes32
        +add_server_to_schema(ps_id:bytes32,server_addr:string)
        +add_server_to_schema(schema_name:string,schema_version:string,server_addr:string)
        +set_schema_status(ps_id:bytes32,configured:bool)
        +set_schema_status(schema_name:string,schema_version:string,configured:bool)

        +exist(pid:string) bool
        +get(id:bytes32) PayloadSchema
        +get(schema_name:string,schema_version:string) PayloadSchema
        +get_by_index(index:uint256) PayloadSchema
        +count() uint256
    }

%%% Services

    class AuthoritiesService{
        +create_dnam(ror_id: string, s_prefix : string, responsable: address) bytes32
        +create_sma(ror_id: string, sma_sprefix : string, responsable: address) bytes32
        +configure_noid_provider_dnma(nam:string, auth_id:bytes32, noid_len: uint8, type: uint8) address
        +get_proveider_addr(rep_addr:address) address
    }

    AuthoritiesService "1" *--  "1" AuthoritiesDB

    class PidService{
        +assingID(sender:address) bytes32
        +addExternalPid(pid_hash:bytes32, schema:string, external_pid:string)
        +set_url(pid_hash:bytes32, url:string)
        +set_payload(pid_hash:bytes32, payload:string)

    }

    PidService "1" *--  "1" AuthoritiesService
    PidService "1" *--  "1" ExternalPidService
    PidService "1" *--  "1" PidDB

    class ExternalPidService{
        +get_or_create_external_pud(schema:string, pid: string, pid_hash:bytes32) bytes32
    }

    ExternalPidService "1" *--  "1" ExternalPidDB

    PidService "1" *--  "1" URLService
    
    class URLService{
        +get_or_create_url(url: string, pid_hash:bytes32) bytes32
    }
    
    URLService "1" *--  "1" UrlDB

    class UrlDB{
        -Set~bytes32~URL

        +save(url:string, dark_pid_hash:bytes32) bytes32
        +exist(url:string) bool
        +get(id:bytes32) ExternalPID
        +get(url:string) ExternalPID
        +get_by_index(index:uint256) ExternalPID
        +count() uint256
    }
    